{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getQuickSortAnimations","array","animations","quickSortHelper","startIdx","endIdx","i","j","push","tmp","quickSortPartition","length","getMergeSortAnimations","auxArray","slice","mergeSortHelper","mainArray","midIdx","Math","floor","k","mergeSort","maxHeapify","leftChild","rightChild","larger","SortingVisualizer","props","state","this","buildArray","min","max","random","setState","className","map","value","idx","key","style","backgroundColor","height","onClick","quickSort","heapSort","bubbleSort","id","href","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","currentBar","newHeight","getHeapSortAnimations","event1","event2","changingColor","colorType","pass","getBubbleSortAnimations","currentBarStyle","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.18104708.chunk.js","sourcesContent":["export function getQuickSortAnimations(array)\r\n{\r\n    const animations = [];\r\n    quickSortHelper(array, 0, array.length-1, animations);\r\n    return animations;\r\n}\r\n\r\nfunction quickSortHelper(array, startIdx, endIdx, animations)\r\n{\r\n    if (startIdx < endIdx)\r\n    {\r\n        const i = quickSortPartition(array, startIdx, endIdx, animations);\r\n        quickSortHelper(array, startIdx, i-1, animations);\r\n        quickSortHelper(array, i+1, endIdx, animations);\r\n    }\r\n}\r\n\r\nfunction quickSortPartition(array, startIdx, endIdx, animations)\r\n{\r\n    let i = startIdx;\r\n\r\n    for (let j = startIdx; j < endIdx; ++j)\r\n    {\r\n        animations.push([j, endIdx]);\r\n        animations.push([j, endIdx]);\r\n\r\n        if (array[j] <= array[endIdx])\r\n        {\r\n            const tmp = array[i];\r\n            array[i] = array[j];\r\n            array[j] = tmp;\r\n            animations.push([i, array[i]]);\r\n            ++i;\r\n        }\r\n        else animations.push([i, array[i]]);\r\n\r\n        animations.push([j, array[j]]);\r\n    }\r\n\r\n    animations.push([i, endIdx]);\r\n    animations.push([i, endIdx]);\r\n    const tmp = array[i];\r\n    array[i] = array[endIdx];\r\n    array[endIdx] = tmp;\r\n    animations.push([i, array[i]]);\r\n    animations.push([endIdx, array[endIdx]]);\r\n\r\n    return i;\r\n}\r\n\r\nexport function getMergeSortAnimations(array)\r\n{\r\n    const animations = [];\r\n    const auxArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length-1, auxArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxArray, animations)\r\n{\r\n    if (startIdx === endIdx) return;\r\n    const midIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxArray, startIdx, midIdx, mainArray, animations);\r\n    mergeSortHelper(auxArray, midIdx+1, endIdx, mainArray, animations);\r\n    mergeSort(mainArray, startIdx, midIdx, endIdx, auxArray, animations);\r\n}\r\n\r\nfunction mergeSort(mainArray, startIdx, midIdx, endIdx, auxArray, animations)\r\n{\r\n    let k = startIdx, i = startIdx, j = midIdx+1;\r\n\r\n    while (i <= midIdx && j <= endIdx)\r\n    {\r\n        animations.push([i, j]);\r\n        animations.push([i, j]);\r\n\r\n        if (auxArray[i] <= auxArray[j])\r\n        {\r\n            animations.push([k, auxArray[i]]);\r\n            mainArray[k++] = auxArray[i++];\r\n        }\r\n        else\r\n        {\r\n            animations.push([k, auxArray[j]]);\r\n            mainArray[k++] = auxArray[j++];\r\n        }\r\n    }\r\n\r\n    while (i <= midIdx)\r\n    {\r\n        animations.push([i, i]);\r\n        animations.push([i, i]);    \r\n        animations.push([k, auxArray[i]]);\r\n        mainArray[k++] = auxArray[i++];\r\n    }\r\n\r\n    while (j <= endIdx)\r\n    {\r\n        animations.push([j, j]);\r\n        animations.push([j, j]);\r\n        animations.push([k, auxArray[j]]);\r\n        mainArray[k++] = auxArray[j++];\r\n    }\r\n}\r\n\r\nexport function getHeapSortAnimations(array)\r\n{\r\n    const animations = [];\r\n\r\n    for (let i = (array.length/2)-1; i >= 0; --i)\r\n        maxHeapify(array, i, array.length, animations);\r\n\r\n    for (let i = array.length-1; i > 0; --i)\r\n    {\r\n        const tmp = array[0];\r\n        array[0] = array[i];\r\n        array[i] = tmp;\r\n        animations.push([0, array[0], false, false]);\r\n        animations.push([i, array[i], false, false]);\r\n        maxHeapify(array, 0, i, animations);\r\n    }\r\n\r\n    return animations;\r\n}\r\n\r\nfunction maxHeapify(array, startIdx, endIdx, animations)\r\n{\r\n    const leftChild = (startIdx*2)+1;\r\n    const rightChild = leftChild+1;\r\n    let larger = startIdx;\r\n\r\n    if (leftChild < endIdx && array[leftChild] > array[startIdx])\r\n    {\r\n        animations.push([leftChild, startIdx, true, false]);\r\n        animations.push([leftChild, startIdx, true, true]);\r\n        larger = leftChild;\r\n    }\r\n\r\n    if (rightChild < endIdx && array[rightChild] > array[larger])\r\n    {\r\n        animations.push([rightChild, larger, true, false]);\r\n        animations.push([rightChild, larger, true, true]);\r\n        larger = rightChild;\r\n    }\r\n\r\n    animations.push([larger, startIdx, true, false]);\r\n    animations.push([larger, startIdx, true, true]);\r\n\r\n    if (larger !== startIdx)\r\n    {\r\n        const tmp = array[startIdx];\r\n        array[startIdx] = array[larger];\r\n        array[larger] = tmp;\r\n        animations.push([startIdx, array[startIdx], false, false]);\r\n        animations.push([larger, array[larger], false, false]);\r\n        maxHeapify(array, larger, endIdx, animations);\r\n    }\r\n}\r\n\r\nexport function getBubbleSortAnimations(array)\r\n{\r\n    const animations = [];\r\n\r\n    for (let pass = 0; pass < array.length-1; ++pass)\r\n    {\r\n        for (let i = 0; i < array.length-1-pass; ++i)\r\n        {\r\n            const j = i+1;\r\n            animations.push([i, j]);\r\n            animations.push([i, j]);\r\n\r\n            if (array[i] > array[j])\r\n            {\r\n                const tmp = array[i];\r\n                array[i] = array[j];\r\n                array[j] = tmp;\r\n            }\r\n            \r\n            animations.push([i, array[i]]);\r\n            animations.push([j, array[j]]);\r\n        }\r\n    }\r\n\r\n    return animations;\r\n}","import React from 'react';\r\nimport {getQuickSortAnimations, getMergeSortAnimations, getHeapSortAnimations, getBubbleSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport './SortingVisualizer.css';\r\n\r\nconst ANIMATION_SPEED_MS = 5;\r\nconst NUMBER_OF_ARRAY_BARS = 160;\r\nconst PRIMARY_COLOR = 'turquoise';\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default class SortingVisualizer extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: []\r\n        }\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        this.buildArray();\r\n    }\r\n\r\n    buildArray()\r\n    {\r\n        const array = [];\r\n\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; ++i)\r\n            array.push(randomFromInterval(5, 500));\r\n\r\n        this.setState({array});\r\n    }\r\n\r\n    render()\r\n    {\r\n        const {array} = this.state;\r\n\r\n        return (\r\n            <div className='array-container'>\r\n                {array.map((value, idx) => (\r\n                    <div className='array-bar'\r\n                        key={idx}\r\n                        style=\r\n                        {{\r\n                            backgroundColor: PRIMARY_COLOR,\r\n                            height: `${value}px`,\r\n                        }}>\r\n                    </div>\r\n                ))}\r\n\r\n                <div className='buttons'>\r\n                    <button onClick={() => this.buildArray()}>Generate a New Array</button>\r\n                    <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n                    <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                    <button onClick={() => this.heapSort()}>Heap Sort</button>\r\n                    <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n                </div>\r\n\r\n                <p id='footer'>&copy; Sorting Visualizer created by <a href='https://github.com/nikolatechie'>Nikola Grujic</a></p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    quickSort()\r\n    {\r\n        const animations = getQuickSortAnimations(this.state.array);\r\n\r\n        for (let i = 0; i < animations.length; ++i)\r\n        {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const changingColor = (i % 4 < 2);\r\n\r\n            if (changingColor)\r\n            {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = (i % 2 === 0) ? SECONDARY_COLOR:PRIMARY_COLOR;\r\n\r\n                setTimeout(() =>\r\n                {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i*ANIMATION_SPEED_MS*1.6);\r\n            }\r\n            else\r\n            {\r\n                setTimeout(() =>\r\n                {\r\n                    const [currentBar, newHeight] = animations[i];\r\n                    const currentBarStyle = arrayBars[currentBar].style;\r\n                    currentBarStyle.height = `${newHeight}px`;\r\n                }, i*ANIMATION_SPEED_MS*1.6);\r\n            }\r\n        }\r\n    }\r\n\r\n    mergeSort()\r\n    {\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        \r\n        for (let i = 0; i < animations.length; ++i)\r\n        {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const changingColor = (i % 3 !== 2);\r\n\r\n            if (changingColor)\r\n            {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = (i % 3 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n\r\n                setTimeout(() =>\r\n                {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i*ANIMATION_SPEED_MS*2);\r\n            }\r\n            else\r\n            {\r\n                setTimeout(() =>\r\n                {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i*ANIMATION_SPEED_MS*2);\r\n            }\r\n        }\r\n    }\r\n\r\n    heapSort()\r\n    {\r\n        const animations = getHeapSortAnimations(this.state.array);\r\n\r\n        for (let i = 0; i < animations.length; ++i)\r\n        {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const [event1, event2, changingColor, colorType] = animations[i];\r\n\r\n            if (changingColor)\r\n            {\r\n                setTimeout(() =>\r\n                {\r\n                    const color = (colorType) ? PRIMARY_COLOR:SECONDARY_COLOR;\r\n                    const barOneStyle = arrayBars[event1].style;\r\n                    const barTwoStyle = arrayBars[event2].style;\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i*ANIMATION_SPEED_MS*1.2);\r\n            }\r\n            else\r\n            {\r\n                setTimeout(() =>\r\n                {\r\n                    const barStyle = arrayBars[event1].style;\r\n                    barStyle.height = `${event2}px`;\r\n                }, i*ANIMATION_SPEED_MS*1.2);\r\n            }\r\n        }\r\n    }\r\n\r\n    bubbleSort()\r\n    {\r\n        const animations = getBubbleSortAnimations(this.state.array);\r\n\r\n        for (let i = 0; i < animations.length; ++i)\r\n        {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const changingColor = (i % 4 < 2);\r\n\r\n            if (changingColor)\r\n            {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = (i % 4 === 0) ? SECONDARY_COLOR:PRIMARY_COLOR;\r\n\r\n                setTimeout(() =>\r\n                {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i*ANIMATION_SPEED_MS/1.5);\r\n            }\r\n            else\r\n            {\r\n                const [currentBar, newHeight] = animations[i];\r\n                const currentBarStyle = arrayBars[currentBar].style;\r\n\r\n                setTimeout(() =>\r\n                {\r\n                    currentBarStyle.height = `${newHeight}px`;\r\n                }, i*ANIMATION_SPEED_MS/1.5);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction randomFromInterval(min, max)\r\n{\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App()\n{\n  return (\n    <div className=\"App\">\n        <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}